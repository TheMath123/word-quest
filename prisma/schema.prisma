// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          String          @default("USER")
  gameData      GameData?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model GameData {
  id              String            @id @default(cuid())
  user            User              @relation(fields: [userId], references: [id])
  userId          String            @unique
  totalCompleted  Int               @default(0)
  puzzlesCompleted PuzzleCompleted[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model PuzzleCompleted {
  id         String   @id @default(cuid())
  puzzle     Puzzle   @relation(fields: [puzzleId], references: [id])
  puzzleId   String
  completedAt DateTime @default(now())
  gameData   GameData @relation(fields: [gameDataId], references: [id])
  gameDataId String
}

model Alphabet {
  id         String   @id @default(cuid())
  name       String   @unique
  characters String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  puzzles    Puzzle[]
}
model Puzzle {
  id               String           @id @default(cuid())
  word             String
  tip              String
  alphabet         Alphabet          @relation(fields: [alphabetName], references: [name])
  alphabetName     String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  puzzlesCompleted PuzzleCompleted[]
}

